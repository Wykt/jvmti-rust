/// A type-safe representation of possible errors
#[derive(Debug)]
pub enum NativeError {
    NoError = 0,
    InvalidThread = 10,
    InvalidThreadGroup = 11,
    InvalidPriority = 12,
    ThreadNotSuspended = 13,
    ThreadSuspended = 14,
    ThreadNotAlive = 15,
    InvalidObject = 20,
    InvalidClass = 21,
    ClassNotPrepared = 22,
    InvalidMethodId = 23,
    InvalidLocation = 24,
    InvalidFieldId = 25,
    NoMoreFrames = 26,
    OpaqueFrame = 32,
    TypeMismatch = 34,
    InvalidSlot = 35,
    Duplicate = 40,
    NotFound = 41,
    InvalidMonitor = 50,
    NotMonitorOwner = 51,
    Interrupt = 52,
    InvalidClassFormat = 60,
    CircularClassDefinition = 61,
    FailsVerification = 62,
    UnsupportedRedefinitionMethodAdded = 63,
    UnsupportedRedefinitionSchemaChanged = 64,
    InvalidTypeState = 65,
    UnsupportedRedefinitionHierarchyChanged = 66,
    UnsupportedRedefinitionMethodDeleted = 67,
    UnsupportedVersion = 68,
    NamesDontMatch = 69,
    UnsupportedRedefinitionClassModifiersChanged = 70,
    UnsupportedRedefinitionMethodModifiersChanged = 71,
    UnmodifiableClass = 79,
    NotAvailable = 98,
    MustPossessCapability = 99,
    NullPointer = 100,
    AbsentInformation = 101,
    InvalidEventType = 102,
    IllegalArgument = 103,
    NativeMethod = 104,
    ClassLoaderUnsupported = 106,
    OutOfMemory = 110,
    AccessDenied = 111,
    WrongPhase = 112,
    UnexpectedInternalError = 113,
    ThreadNotAttached = 115,
    Disconnected = 116,
    NotImplemented = 999999, // <- now this is a "temporary" hack until the library is under heavy development
    UnknownError
}

/// Turn a native error code into a type-safe error
pub fn wrap_error(code: u32) -> NativeError {
    match code {
        0 => NativeError::NoError,
        10 => NativeError::InvalidThread,
        11 => NativeError::InvalidThreadGroup,
        12 => NativeError::InvalidPriority,
        13 => NativeError::ThreadNotSuspended,
        14 => NativeError::ThreadSuspended,
        15 => NativeError::ThreadNotAlive,
        20 => NativeError::InvalidObject,
        21 => NativeError::InvalidClass,
        22 => NativeError::ClassNotPrepared,
        23 => NativeError::InvalidMethodId,
        24 => NativeError::InvalidLocation,
        25 => NativeError::InvalidFieldId,
        26 => NativeError::NoMoreFrames,
        32 => NativeError::OpaqueFrame,
        34 => NativeError::TypeMismatch,
        35 => NativeError::InvalidSlot,
        40 => NativeError::Duplicate,
        41 => NativeError::NotFound,
        50 => NativeError::InvalidMonitor,
        51 => NativeError::NotMonitorOwner,
        52 => NativeError::Interrupt,
        60 => NativeError::InvalidClassFormat,
        61 => NativeError::CircularClassDefinition,
        62 => NativeError::FailsVerification,
        63 => NativeError::UnsupportedRedefinitionMethodAdded,
        64 => NativeError::UnsupportedRedefinitionSchemaChanged,
        65 => NativeError::InvalidTypeState,
        66 => NativeError::UnsupportedRedefinitionHierarchyChanged,
        67 => NativeError::UnsupportedRedefinitionMethodDeleted,
        68 => NativeError::UnsupportedVersion,
        69 => NativeError::NamesDontMatch,
        70 => NativeError::UnsupportedRedefinitionClassModifiersChanged,
        71 => NativeError::UnsupportedRedefinitionMethodModifiersChanged,
        79 => NativeError::UnmodifiableClass,
        98 => NativeError::NotAvailable,
        99 => NativeError::MustPossessCapability,
        100 => NativeError::NullPointer,
        101 => NativeError::AbsentInformation,
        102 => NativeError::InvalidEventType,
        103 => NativeError::IllegalArgument,
        104 => NativeError::NativeMethod,
        106 => NativeError::ClassLoaderUnsupported,
        110 => NativeError::OutOfMemory,
        111 => NativeError::AccessDenied,
        112 => NativeError::WrongPhase,
        113 => NativeError::UnexpectedInternalError,
        115 => NativeError::ThreadNotAttached,
        116 => NativeError::Disconnected,
        999999 => NativeError::NotImplemented,
        _ => { println!("Unknown error code was detected: {}", code); NativeError::UnknownError }
    }
}

/// Turn native error codes into meaningful and user-readable strings
pub fn translate_error(code: &NativeError) -> &str {
    match code {
        NativeError::NoError => "No error has occurred.",
        NativeError::InvalidPriority => "priority is less than JVMTI_THREAD_MIN_PRIORITY or greater than JVMTI_THREAD_MAX_PRIORITY",
        NativeError::InvalidThread => "thread is not a thread object.",
        NativeError::InvalidObject => "Invalid object.",
        NativeError::InvalidClass => "Invalid class.",
        NativeError::InvalidLocation => "Invalid location.",
        NativeError::InvalidFieldId => "Invalid field.",
        NativeError::InvalidThreadGroup => "thread is not a thread group object.",
        NativeError::FailsVerification => "The retransformed class file bytes fail verification.",
        NativeError::InvalidClassFormat => "A new class file is malformed (The VM would return a ClassFormatError).",
        NativeError::UnsupportedRedefinitionMethodAdded => "A retransformed class file would require adding a method.",
        NativeError::UnsupportedVersion => "A new class file has a version number not supported by this VM.",
        NativeError::MustPossessCapability => "The environment does not possess the capability can_redefine_classes. Use AddCapabilities.",
        NativeError::UnmodifiableClass => "An element of class_definitions cannot be modified. See IsModifiableClass.",
        NativeError::UnsupportedRedefinitionSchemaChanged => "A new class version changes a field.",
        NativeError::NamesDontMatch => "The class name defined in a new class file is different from the name in the old class object.",
        NativeError::UnsupportedRedefinitionMethodModifiersChanged => "A method in the new class version has different modifiers than its counterpart in the old class version.",
        NativeError::UnsupportedRedefinitionClassModifiersChanged => "A new class version has different modifiers.",
        NativeError::UnsupportedRedefinitionMethodDeleted => "A new class version does not declare a method declared in the old class version.",
        NativeError::UnsupportedRedefinitionHierarchyChanged => "A direct superclass is different for a new class version, or the set of directly implemented interfaces is different.",
        NativeError::NullPointer => "Pointer is unexpectedly NULL.",
        NativeError::OutOfMemory => "The function attempted to allocate memory and no more memory was available for allocation.",
        NativeError::AccessDenied => "The desired functionality has not been enabled in this virtual machine.",
        NativeError::NotAvailable => "The desired functionality is not available in the current phase. Always returned if the virtual machine has completed running.",
        NativeError::UnexpectedInternalError => "An unexpected internal error has occurred.",
        NativeError::ThreadNotAttached => "The thread being used to call this function is not attached to the virtual machine. Calls must be made from attached threads.",
        NativeError::Disconnected => "The JVM TI environment provided is no longer connected or is not an environment.",
        NativeError::NotImplemented => "This function is not implemented yet",
        NativeError::UnknownError => "Unknown error.",
        _ => "Unhandled error."
    }
}

impl core::fmt::Display for NativeError {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        let translated_error = translate_error(self);
        write!(f, "{}", translated_error)
    }
}
